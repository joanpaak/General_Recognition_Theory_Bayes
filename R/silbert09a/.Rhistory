matrix(c(1, rho_, rho_, 1), 2, 2))[1]
}
# Just to make sure that the distrubution
# is a probability distribution:
# (prbably should throw warnings if assumptions are
# violated gravely)
p[p < 0] = 0
p = p / sum(p)
sum(p)
return(p)
}
getPVec(c(-2, -2), 0, xMat)
genRandSlice = function(N, mu, rho, xMat){
# Returns the full "response" vector for a given latent
# distribution defined by the vector of mus and rho.
#
# Retuns something like this:
# [1]  14  45  34 157
cats = sample(1:4, N, T, getPVec(mu, rho, xMat))
return(as.vector(table(factor(cats, levels = 1:4))))
}
simulateCmat = function(theta, xMat){
# Theta = a slice of posterior from Stan
mu_mat  = matrix(theta[1:8], ncol = 2, nrow = 4)
rho_vec = tanh(theta[9:12])
sim_cmat = matrix(NaN, nrow = 4, ncol = 4)
for(i in 1:4){
sim_cmat[i,] = genRandSlice(250, mu_mat[i,], rho_vec[i], xMat)
}
return(sim_cmat)
}
posterior_draws = as.matrix(fit_four_rhos)
NSimulations    = 100
simulated_matrices = array(NaN, dim = c(NSimulations, 4, 4))
for(i in 1:NToSimulate){
simulated_matrices[i,,] = simulateCmat(posterior_draws[i,], xMat)
}
hist(simulated_matrices[,1,1]); abline(v = silbert09a[1,1])
hist(simulated_matrices[,1,1]); abline(v = silbert09a[1,1], col = "red")
hist(simulated_matrices[,1,1]); abline(v = silbert09a[1,1], col = "red", lwd = 1.5)
hist(simulated_matrices[,1,1]); abline(v = silbert09a[1,1], col = "red", lwd = 2)
par(mfrow = c(4,4))
for(i in 1:4){
for(j in 1:4){
hist(simulated_matrices[,i,j]); abline(v = silbert09a[i,j], col = "red", lwd = 2)
}
}
posterior_draws = as.matrix(fit_four_rhos)
NSimulations    = 1000
simulated_matrices = array(NaN, dim = c(NSimulations, 4, 4))
for(i in 1:NToSimulate){
simulated_matrices[i,,] = simulateCmat(posterior_draws[i,], xMat)
}
par(mfrow = c(4,4))
for(i in 1:4){
for(j in 1:4){
hist(simulated_matrices[,i,j]); abline(v = silbert09a[i,j], col = "red", lwd = 2)
}
}
posterior_draws = as.matrix(fit_four_rhos)
NSimulations    = 2000
simulated_matrices = array(NaN, dim = c(NSimulations, 4, 4))
for(i in 1:NToSimulate){
simulated_matrices[i,,] = simulateCmat(posterior_draws[i,], xMat)
}
par(mfrow = c(4,4))
for(i in 1:4){
for(j in 1:4){
hist(simulated_matrices[,i,j]); abline(v = silbert09a[i,j], col = "red", lwd = 2)
}
}
par(mfrow = c(4,4))
for(i in 1:4){
for(j in 1:4){
hist(simulated_matrices[,i,j], main = "", xlab = "", ylab = "")
abline(v = silbert09a[i,j], col = "red", lwd = 2)
}
}
par()$ma
par()$mar
#5.1 4.1 4.1 2.1
par(mar = c(2.1,  2.1, 4.1, 2.1))
for(i in 1:4){
for(j in 1:4){
hist(simulated_matrices[,i,j], main = "", xlab = "", ylab = "")
abline(v = silbert09a[i,j], col = "red", lwd = 2)
}
}
#5.1 4.1 4.1 2.1
par(mar = c(1.1,  1.1, 4.1, 2.1))
for(i in 1:4){
for(j in 1:4){
hist(simulated_matrices[,i,j], main = "", xlab = "", ylab = "")
abline(v = silbert09a[i,j], col = "red", lwd = 2)
}
}
#5.1 4.1 4.1 2.1
par(mar = c(1.1,  2.1, 2.1, 2.1))
for(i in 1:4){
for(j in 1:4){
hist(simulated_matrices[,i,j], main = "", xlab = "", ylab = "")
abline(v = silbert09a[i,j], col = "red", lwd = 2)
}
}
getPVec = function(mu, rho, xMat){
p = c()
for(i in 1:4){
rho_ = rho * prod(xMat[i,])
# p[i] = pmvnorm(c(0, 0), c(Inf, Inf), mu * xMat[i,],
#                matrix(c(1, rho_, rho_, 1), 2, 2))[1]
p[i] = pmvnorm(c(-Inf, -Inf), mu * xMat[i,], c(0, 0),
matrix(c(1, rho_, rho_, 1), 2, 2))[1]
}
# Just to make sure that the distrubution
# is a probability distribution:
# (prbably should throw warnings if assumptions are
# violated gravely)
p[p < 0] = 0
p = p / sum(p)
sum(p)
return(p)
}
getPVec(c(-2, -2), 0, xMat)
genRandSlice = function(N, mu, rho, xMat){
# Returns the full "response" vector for a given latent
# distribution defined by the vector of mus and rho.
#
# Retuns something like this:
# [1]  14  45  34 157
cats = sample(1:4, N, T, getPVec(mu, rho, xMat))
return(as.vector(table(factor(cats, levels = 1:4))))
}
simulateCmat = function(theta, xMat){
# Theta = a slice of posterior from Stan
mu_mat  = matrix(theta[1:8], ncol = 2, nrow = 4)
rho_vec = tanh(theta[9:12])
sim_cmat = matrix(NaN, nrow = 4, ncol = 4)
for(i in 1:4){
sim_cmat[i,] = genRandSlice(250, mu_mat[i,], rho_vec[i], xMat)
}
return(sim_cmat)
}
posterior_draws = as.matrix(fit_four_rhos)
NSimulations    = 2000
simulated_matrices = array(NaN, dim = c(NSimulations, 4, 4))
for(i in 1:NToSimulate){
simulated_matrices[i,,] = simulateCmat(posterior_draws[i,], xMat)
}
par(mfrow = c(4,4))
#5.1 4.1 4.1 2.1
par(mar = c(1.1,  2.1, 2.1, 2.1))
for(i in 1:4){
for(j in 1:4){
hist(simulated_matrices[,i,j], main = "", xlab = "", ylab = "")
abline(v = silbert09a[i,j], col = "red", lwd = 2)
}
}
nrows(posterior_draws)
nrows(posterior_draws)
nrow(posterior_draws)
posterior_draws = as.matrix(fit_four_rhos)
NSimulations    = 4000
simulated_matrices = array(NaN, dim = c(NSimulations, 4, 4))
for(i in 1:NToSimulate){
simulated_matrices[i,,] = simulateCmat(posterior_draws[i,], xMat)
}
par(mfrow = c(4,4))
#5.1 4.1 4.1 2.1
par(mar = c(1.1,  2.1, 2.1, 2.1))
for(i in 1:4){
for(j in 1:4){
hist(simulated_matrices[,i,j], main = "", xlab = "", ylab = "")
abline(v = silbert09a[i,j], col = "red", lwd = 2)
}
}
par(mfrow = c(4,4))
#5.1 4.1 4.1 2.1
par(mar = c(1.1,  2.1, 2.1, 2.1))
for(i in 1:4){
for(j in 1:4){
hist(simulated_matrices[,i,j], main = "", xlab = "", ylab = "")
abline(v = silbert09a[i,j], col = "red", lwd = 2)
}
}
genPosteriorPredictive = function(stanfit, NSimulations, NPerRow){
posterior_draws = as.matrix(fit_four_rhos)
if(nrow(posterior_draws) < NSimulations){
warning(paste(NSimulations, "posterior draws asked, but only",
nrow(posterior_draws), "samples in the stanfit object."))
NSimulations = nrow(posterior_draws)
}
simulated_matrices = array(NaN, dim = c(NSimulations, 4, 4))
for(i in 1:NToSimulate){
simulated_matrices[i,,] = simulateCmat(NPerRow, posterior_draws[i,], xMat)
}
return(simulated_matrices)
}
postPredFourRhos = genPosteriorPredictive(fit_four_rhos, 4000, 250)
postPredFourRhos = genPosteriorPredictive(fit_four_rhos, xMat, 4000, 250)
genPosteriorPredictive = function(stanfit, xMat, NSimulations, NPerRow){
posterior_draws = as.matrix(fit_four_rhos)
if(nrow(posterior_draws) < NSimulations){
warning(paste(NSimulations, "posterior draws asked, but only",
nrow(posterior_draws), "samples in the stanfit object."))
NSimulations = nrow(posterior_draws)
}
simulated_matrices = array(NaN, dim = c(NSimulations, 4, 4))
for(i in 1:NToSimulate){
simulated_matrices[i,,] = simulateCmat(NPerRow, posterior_draws[i,], xMat)
}
return(simulated_matrices)
}
postPredFourRhos = genPosteriorPredictive(fit_four_rhos, xMat, 4000, 250)
getPVec = function(mu, rho, xMat){
p = c()
for(i in 1:4){
rho_ = rho * prod(xMat[i,])
# p[i] = pmvnorm(c(0, 0), c(Inf, Inf), mu * xMat[i,],
#                matrix(c(1, rho_, rho_, 1), 2, 2))[1]
p[i] = pmvnorm(c(-Inf, -Inf), mu * xMat[i,], c(0, 0),
matrix(c(1, rho_, rho_, 1), 2, 2))[1]
}
# Just to make sure that the distrubution
# is a probability distribution:
# (prbably should throw warnings if assumptions are
# violated gravely)
p[p < 0] = 0
p = p / sum(p)
sum(p)
return(p)
}
getPVec(c(-2, -2), 0, xMat)
genRandSlice = function(N, mu, rho, xMat){
# Returns the full "response" vector for a given latent
# distribution defined by the vector of mus and rho.
#
# Retuns something like this:
# [1]  14  45  34 157
cats = sample(1:4, N, T, getPVec(mu, rho, xMat))
return(as.vector(table(factor(cats, levels = 1:4))))
}
simulateCmat = function(NPerRow, theta, xMat){
# Theta = a slice of posterior from Stan
mu_mat  = matrix(theta[1:8], ncol = 2, nrow = 4)
rho_vec = tanh(theta[9:12])
sim_cmat = matrix(NaN, nrow = 4, ncol = 4)
for(i in 1:4){
sim_cmat[i,] = genRandSlice(NPerRow, mu_mat[i,], rho_vec[i], xMat)
}
return(sim_cmat)
}
genPosteriorPredictive = function(stanfit, xMat, NSimulations, NPerRow){
posterior_draws = as.matrix(fit_four_rhos)
if(nrow(posterior_draws) < NSimulations){
warning(paste(NSimulations, "posterior draws asked, but only",
nrow(posterior_draws), "samples in the stanfit object."))
NSimulations = nrow(posterior_draws)
}
simulated_matrices = array(NaN, dim = c(NSimulations, 4, 4))
for(i in 1:NToSimulate){
simulated_matrices[i,,] = simulateCmat(NPerRow, posterior_draws[i,], xMat)
}
return(simulated_matrices)
}
postPredFourRhos = genPosteriorPredictive(fit_four_rhos, xMat, 4000, 250)
par(mfrow = c(4,4))
#5.1 4.1 4.1 2.1
par(mar = c(1.1,  2.1, 2.1, 2.1))
for(i in 1:4){
for(j in 1:4){
hist(postPredFourRhos[,i,j], main = "", xlab = "", ylab = "")
abline(v = silbert09a[i,j], col = "red", lwd = 2)
}
}
posterior_draws = as.matrix(fit_four_rhos)
length(posterior_draws[1,])
posterior_draws = as.matrix(fit_one_rho)
length(posterior_draws[1,])
getPVec = function(mu, rho, xMat){
p = c()
for(i in 1:4){
rho_ = rho * prod(xMat[i,])
p[i] = pmvnorm(c(-Inf, -Inf), mu * xMat[i,], c(0, 0),
matrix(c(1, rho_, rho_, 1), 2, 2))[1]
}
# Just to make sure that the distribution
# is a probability distribution:
# (probably should throw warnings if assumptions are
# violated gravely)
p[p < 0] = 0
p = p / sum(p)
sum(p)
return(p)
}
genRandSlice = function(N, mu, rho, xMat){
# Returns the full "response" vector for a given latent
# distribution defined by the vector of mus and rho.
#
# Retuns something like this:
# [1]  14  45  34 157
cats = sample(1:4, N, T, getPVec(mu, rho, xMat))
return(as.vector(table(factor(cats, levels = 1:4))))
}
simulateCmat = function(NPerRow, theta, xMat){
#
# At this point, this supports the following models:
# - 2x2 one rho
# - 2x2 four rhos
#
# NPerRow = Total number of observations per stimulus
# Theta = a slice of posterior from Stan
mu_mat  = matrix(theta[1:8], ncol = 2, nrow = 4)
if(length(theta) == 13){
rho_vec = tanh(theta[9:12])
} else if(length(theta) == 10){
rho_vec = rep(tanh(theta[9], 4))
} else {
stop("Incorrect length of a posterior draw")
}
sim_cmat = matrix(NaN, nrow = 4, ncol = 4)
for(i in 1:4){
sim_cmat[i,] = genRandSlice(NPerRow, mu_mat[i,], rho_vec[i], xMat)
}
return(sim_cmat)
}
posterior_draws = as.matrix(fit_four_rhos)
genPosteriorPredictive = function(stanfit, xMat, NSimulations, NPerRow){
posterior_draws = as.matrix(stanfit)
if(nrow(posterior_draws) < NSimulations){
warning(paste(NSimulations, "posterior draws asked, but only",
nrow(posterior_draws), "samples in the stanfit object."))
NSimulations = nrow(posterior_draws)
}
simulated_matrices = array(NaN, dim = c(NSimulations, 4, 4))
for(i in 1:NToSimulate){
simulated_matrices[i,,] = simulateCmat(NPerRow, posterior_draws[i,], xMat)
}
return(simulated_matrices)
}
postPredFourRhos = genPosteriorPredictive(fit_four_rhos, xMat, 4000, 250)
postPredOneRho   = genPosteriorPredictive(fit_one_rho, xMat, 4000, 250)
simulateCmat = function(NPerRow, theta, xMat){
#
# At this point, this supports the following models:
# - 2x2 one rho
# - 2x2 four rhos
#
# NPerRow = Total number of observations per stimulus
# Theta = a slice of posterior from Stan
mu_mat  = matrix(theta[1:8], ncol = 2, nrow = 4)
if(length(theta) == 13){
rho_vec = tanh(theta[9:12])
} else if(length(theta) == 10){
rho_vec = rep(tanh(theta[9]), 4)
} else {
stop("Incorrect length of a posterior draw")
}
sim_cmat = matrix(NaN, nrow = 4, ncol = 4)
for(i in 1:4){
sim_cmat[i,] = genRandSlice(NPerRow, mu_mat[i,], rho_vec[i], xMat)
}
return(sim_cmat)
}
genPosteriorPredictive = function(stanfit, xMat, NSimulations, NPerRow){
posterior_draws = as.matrix(stanfit)
if(nrow(posterior_draws) < NSimulations){
warning(paste(NSimulations, "posterior draws asked, but only",
nrow(posterior_draws), "samples in the stanfit object."))
NSimulations = nrow(posterior_draws)
}
simulated_matrices = array(NaN, dim = c(NSimulations, 4, 4))
for(i in 1:NToSimulate){
simulated_matrices[i,,] = simulateCmat(NPerRow, posterior_draws[i,], xMat)
}
return(simulated_matrices)
}
postPredFourRhos = genPosteriorPredictive(fit_four_rhos, xMat, 4000, 250)
postPredOneRho   = genPosteriorPredictive(fit_one_rho, xMat, 4000, 250)
plotPostPred = function(postpred, obs){
par(mfrow = c(4,4))
#5.1 4.1 4.1 2.1
par(mar = c(1.1, ss2.1, 2.1, 2.1))
for(i in 1:4){
for(j in 1:4){
hist(postpred[,i,j], main = "", xlab = "", ylab = "")
abline(v = obs[i,j], col = "red", lwd = 2)
}
}
}
plotPostPred(postPredFourRhos, silbert09a)
plotPostPred = function(postpred, obs){
par(mfrow = c(4,4))
#5.1 4.1 4.1 2.1
par(mar = c(1.1, 2.1, 2.1, 2.1))
for(i in 1:4){
for(j in 1:4){
hist(postpred[,i,j], main = "", xlab = "", ylab = "")
abline(v = obs[i,j], col = "red", lwd = 2)
}
}
}
plotPostPred(postPredFourRhos, silbert09a)
plotPostPred(postPredOneRho, silbert09a)
par()
opar = par()
par() = opar
par(opar)
opar = par(no.readonly = F)
par(opar)
opar = par(no.readonly = T)
par(opar)
plotPostPred = function(postpred, obs){
opar = par(no.readonly = T)
par(mfrow = c(4,4))
#5.1 4.1 4.1 2.1
par(mar = c(2.1, 2.1, 2.1, 2.1))
for(i in 1:4){
for(j in 1:4){
hist(postpred[,i,j], main = "", xlab = "", ylab = "")
abline(v = obs[i,j], col = "red", lwd = 2)
}
}
par(opar)
}
par(mfrow = c(1, 1))
par(mar = c(5.1, 4.1, 2.1, 2.1))
plot(rnorm(100))
plotPostPred(postPredFourRhos, silbert09a)
plot(rnorm(100))
plotPostPred = function(postpred, obs){
opar = par(no.readonly = T)
par(mfrow = c(4,4))
par(mar = c(2.1, 2.1, 2.1, 2.1))
for(i in 1:4){
for(j in 1:4){
hist(postpred[,i,j], main = "", xlab = "", ylab = "")
abline(v = obs[i,j], col = "red", lwd = 2)
}
}
par(opar)
}
postPredFourRhos = genPosteriorPredictive(fit_four_rhos, xMat, 4000, 250)
plotPostPred(postPredFourRhos, silbert09a)
plotPostPred(postPredOneRho, silbert09a)
plotPostPred(postPredFourRhos, silbert09a)
plotPostPred(postPredOneRho, silbert09a)
plotPostPred(postPredFourRhos, silbert09a)
plotPostPred(postPredOneRho, silbert09a)
plotPostPred(postPredFourRhos, silbert09a)
plotPostPred(postPredOneRho, silbert09a)
getPVec = function(mu, rho, xMat){
if(rho > 1.0 || rho < -1-0){
stop(paste("Error from getPVec: correlation was not in the range (-1 1), was", rho))
}
p = c()
for(i in 1:4){
rho_ = rho * prod(xMat[i,])
p[i] = pmvnorm(c(-Inf, -Inf), mu * xMat[i,], c(0, 0),
matrix(c(1, rho_, rho_, 1), 2, 2))[1]
}
# Just to make sure that the distribution
# is a probability distribution:
# (probably should throw warnings if assumptions are
# violated gravely)
p[p < 0] = 0
p = p / sum(p)
sum(p)
return(p)
}
getPVec(c(2, 3), -2)
dim(xMAt)
dim(xMat)
dim(xMat) == c(4, 2)
getPVec = function(mu, rho, xMat){
if(!any(dim(xMat) == c(4, 2))){
stop("xMat is not defined properly. Should have 4 rows and 2 columns")
}
if(length(rho) != 1){
stop("You should supply just a single correlation coefficient")
}
if(length(mu) != 2){
stop(paste("Incorrect number of dimensions in mu vector, expected 2 but was", length(mu)))
}
if(rho > 1.0 || rho < -1-0){
stop(paste("Correlation was not in the range (-1 1), was", rho))
}
p = c()
for(i in 1:4){
rho_ = rho * prod(xMat[i,])
p[i] = pmvnorm(c(-Inf, -Inf), mu * xMat[i,], c(0, 0),
matrix(c(1, rho_, rho_, 1), 2, 2))[1]
}
# Just to make sure that the distribution
# is a probability distribution:
# (probably should throw warnings if assumptions are
# violated gravely)
p[p < 0] = 0
p = p / sum(p)
sum(p)
return(p)
}
getPVec(c(2, 3), -2)
getPVec(c(2, 3), -2, xMat)
getPVec(c(2, 3), -0, xMat)
getPVec(c(2), -0, xMat)
getPVec(c(2, 3, 4), -0, xMat)
440 * (16/15)
440 * (10/9)
440 * (18/17)
440 - 415
5.0/4.4
rm(list = ls())
